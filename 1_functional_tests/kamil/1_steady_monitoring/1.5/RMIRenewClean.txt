2013-06-20 15:12:45,190 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** probably it has been unloaded recently
2013-06-20 15:12:45,190 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Profiler engine warning: target VM cannot load class to instrument sun.reflect.GeneratedSerializationConstructorAccessor60
2013-06-20 15:12:45,190 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) , its class = class sun.reflect.DelegatingClassLoader, index = 465, hashcode = 29381466
2013-06-20 15:12:45,190 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Requested classloader: sun.reflect.DelegatingClassLoader@1c0535a
2013-06-20 15:12:45,189 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Profiler engine warning: class sun.reflect.GeneratedSerializationConstructorAccessor60 that should be instrumented is not loaded by target VM
2013-06-20 15:12:45,179 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** probably it has been unloaded recently
2013-06-20 15:12:45,179 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Profiler engine warning: target VM cannot load class to instrument sun.reflect.GeneratedSerializationConstructorAccessor59
2013-06-20 15:12:45,179 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) , its class = class sun.reflect.DelegatingClassLoader, index = 464, hashcode = 21458552
2013-06-20 15:12:45,179 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Requested classloader: sun.reflect.DelegatingClassLoader@1476e78
2013-06-20 15:12:45,174 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Profiler engine warning: class sun.reflect.GeneratedSerializationConstructorAccessor59 that should be instrumented is not loaded by target VM
2013-06-20 15:12:45,167 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** probably it has been unloaded recently
2013-06-20 15:12:45,167 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Profiler engine warning: target VM cannot load class to instrument sun.reflect.GeneratedSerializationConstructorAccessor58
2013-06-20 15:12:45,164 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) , its class = class sun.reflect.DelegatingClassLoader, index = 463, hashcode = 13610182
2013-06-20 15:12:45,163 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Requested classloader: sun.reflect.DelegatingClassLoader@cfacc6
2013-06-20 15:12:45,162 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Profiler engine warning: class sun.reflect.GeneratedSerializationConstructorAccessor58 that should be instrumented is not loaded by target VM
2013-06-20 15:12:45,155 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** probably it has been unloaded recently
2013-06-20 15:12:45,155 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Profiler engine warning: target VM cannot load class to instrument sun.reflect.GeneratedSerializationConstructorAccessor57
2013-06-20 15:12:45,155 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) , its class = class sun.reflect.DelegatingClassLoader, index = 462, hashcode = 13420070
2013-06-20 15:12:45,155 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Requested classloader: sun.reflect.DelegatingClassLoader@ccc626
2013-06-20 15:12:45,151 ERROR [STDERR] (RMI RenewClean-[127.0.0.1:59761]) *** Profiler engine warning: class sun.reflect.GeneratedSerializationConstructorAccessor57 that should be instrumented is not loaded by target VM
2013-06-20 14:52:11,299 ERROR [STDERR] (Attach Listener) 	... 15 more
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.checkMBeanServerBuilder(MBeanServerFactory.java:487)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.loadBuilderClass(MBeanServerFactory.java:445)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:423)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at java.security.AccessController.doPrivileged(Native Method)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) Caused by: java.lang.ClassNotFoundException: org.jboss.mx.server.MBeanServerBuilderImpl
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	... 7 more
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at sun.management.Agent.startAgent(Agent.java:247)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at sun.management.Agent.startLocalManagementAgent(Agent.java:134)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at sun.management.jmxremote.ConnectorBootstrap.startLocalConnectorServer(ConnectorBootstrap.java:519)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at java.lang.management.ManagementFactory.getPlatformMBeanServer(ManagementFactory.java:466)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:191)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:230)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.newMBeanServer(MBeanServerFactory.java:315)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.getNewMBeanServerBuilder(MBeanServerFactory.java:538)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.checkMBeanServerBuilder(MBeanServerFactory.java:502)
2013-06-20 14:52:11,298 ERROR [STDERR] (Attach Listener) Caused by: javax.management.JMRuntimeException: Failed to load MBeanServerBuilder class org.jboss.mx.server.MBeanServerBuilderImpl: java.lang.ClassNotFoundException: org.jboss.mx.server.MBeanServerBuilderImpl
2013-06-20 14:52:11,297 ERROR [STDERR] (Attach Listener) 	... 6 more
2013-06-20 14:52:11,297 ERROR [STDERR] (Attach Listener) 	at sun.management.Agent.agentmain(Agent.java:124)
2013-06-20 14:52:11,297 ERROR [STDERR] (Attach Listener) 	at sun.management.Agent.startAgent(Agent.java:253)
2013-06-20 14:52:11,297 ERROR [STDERR] (Attach Listener) 	at sun.management.Agent.error(Agent.java:439)
2013-06-20 14:52:11,297 ERROR [STDERR] (Attach Listener) Caused by: java.lang.RuntimeException: javax.management.JMRuntimeException: Failed to load MBeanServerBuilder class org.jboss.mx.server.MBeanServerBuilderImpl: java.lang.ClassNotFoundException: org.jboss.mx.server.MBeanServerBuilderImpl
2013-06-20 14:52:11,297 ERROR [STDERR] (Attach Listener) 	at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:407)
2013-06-20 14:52:11,297 ERROR [STDERR] (Attach Listener) 	at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:384)
2013-06-20 14:52:11,297 ERROR [STDERR] (Attach Listener) 	at java.lang.reflect.Method.invoke(Method.java:601)
2013-06-20 14:52:11,296 ERROR [STDERR] (Attach Listener) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2013-06-20 14:52:11,296 ERROR [STDERR] (Attach Listener) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
2013-06-20 14:52:11,296 ERROR [STDERR] (Attach Listener) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2013-06-20 14:52:11,296 ERROR [STDERR] (Attach Listener) java.lang.reflect.InvocationTargetException
2013-06-20 14:52:11,296 ERROR [STDERR] (Attach Listener) Exception thrown by the agent : javax.management.JMRuntimeException: Failed to load MBeanServerBuilder class org.jboss.mx.server.MBeanServerBuilderImpl: java.lang.ClassNotFoundException: org.jboss.mx.server.MBeanServerBuilderImpl
2013-06-20 14:52:11,294 ERROR [STDERR] (Attach Listener) 	... 15 more
2013-06-20 14:52:11,294 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.checkMBeanServerBuilder(MBeanServerFactory.java:487)
2013-06-20 14:52:11,294 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.loadBuilderClass(MBeanServerFactory.java:445)
2013-06-20 14:52:11,294 ERROR [STDERR] (Attach Listener) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:356)
2013-06-20 14:52:11,294 ERROR [STDERR] (Attach Listener) 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
2013-06-20 14:52:11,294 ERROR [STDERR] (Attach Listener) 	at java.lang.ClassLoader.loadClass(ClassLoader.java:423)
2013-06-20 14:52:11,294 ERROR [STDERR] (Attach Listener) 	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
2013-06-20 14:52:11,294 ERROR [STDERR] (Attach Listener) 	at java.security.AccessController.doPrivileged(Native Method)
2013-06-20 14:52:11,293 ERROR [STDERR] (Attach Listener) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
2013-06-20 14:52:11,293 ERROR [STDERR] (Attach Listener) 	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
2013-06-20 14:52:11,293 ERROR [STDERR] (Attach Listener) Caused by: java.lang.ClassNotFoundException: org.jboss.mx.server.MBeanServerBuilderImpl
2013-06-20 14:52:11,293 ERROR [STDERR] (Attach Listener) 	at sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:407)
2013-06-20 14:52:11,293 ERROR [STDERR] (Attach Listener) 	at sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:384)
2013-06-20 14:52:11,292 ERROR [STDERR] (Attach Listener) 	at java.lang.reflect.Method.invoke(Method.java:601)
2013-06-20 14:52:11,292 ERROR [STDERR] (Attach Listener) 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
2013-06-20 14:52:11,292 ERROR [STDERR] (Attach Listener) 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
2013-06-20 14:52:11,292 ERROR [STDERR] (Attach Listener) 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
2013-06-20 14:52:11,292 ERROR [STDERR] (Attach Listener) 	at sun.management.Agent.agentmain(Agent.java:124)
2013-06-20 14:52:11,292 ERROR [STDERR] (Attach Listener) 	at sun.management.Agent.startAgent(Agent.java:247)
2013-06-20 14:52:11,292 ERROR [STDERR] (Attach Listener) 	at sun.management.Agent.startLocalManagementAgent(Agent.java:134)
2013-06-20 14:52:11,291 ERROR [STDERR] (Attach Listener) 	at sun.management.jmxremote.ConnectorBootstrap.startLocalConnectorServer(ConnectorBootstrap.java:519)
2013-06-20 14:52:11,291 ERROR [STDERR] (Attach Listener) 	at java.lang.management.ManagementFactory.getPlatformMBeanServer(ManagementFactory.java:466)
2013-06-20 14:52:11,291 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:191)
2013-06-20 14:52:11,291 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.createMBeanServer(MBeanServerFactory.java:230)
2013-06-20 14:52:11,291 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.newMBeanServer(MBeanServerFactory.java:315)
2013-06-20 14:52:11,291 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.getNewMBeanServerBuilder(MBeanServerFactory.java:538)
2013-06-20 14:52:11,291 ERROR [STDERR] (Attach Listener) 	at javax.management.MBeanServerFactory.checkMBeanServerBuilder(MBeanServerFactory.java:502)
2013-06-20 14:52:11,290 ERROR [STDERR] (Attach Listener) javax.management.JMRuntimeException: Failed to load MBeanServerBuilder class org.jboss.mx.server.MBeanServerBuilderImpl: java.lang.ClassNotFoundException: org.jboss.mx.server.MBeanServerBuilderImpl
2013-06-20 14:47:47,098 DEBUG [org.jboss.ejb.StatelessSessionContainer] (main) Mapped simulateBusinessLogic HASH -168148930to public void org.adaptivecellsj.testbed.ejb.TestBean.simulateBusinessLogic(java.lang.String) throws java.lang.Exception
2013-06-20 14:47:47,092 DEBUG [org.jboss.ejb.StatelessSessionContainer] (main) Mapped simulateBusinessLogic HASH -168148930to public void org.adaptivecellsj.testbed.ejb.TestBean.simulateBusinessLogic(java.lang.String) throws java.lang.Exception
2013-06-20 14:47:47,073 DEBUG [org.jboss.ejb.StatelessSessionContainer] (main) Mapped simulateBusinessLogic HASH -168148930to public void org.adaptivecellsj.testbed.ejb.TestBean.simulateBusinessLogic(java.lang.String) throws java.lang.Exception
2013-06-20 14:47:47,059 DEBUG [org.jboss.ejb.StatelessSessionContainer] (main) Mapped simulateBusinessLogic HASH -168148930to public void org.adaptivecellsj.testbed.ejb.TestBean.simulateBusinessLogic(java.lang.String) throws java.lang.Exception
2013-06-20 14:47:47,051 DEBUG [org.jboss.ejb.StatelessSessionContainer] (main) Mapped simulateBusinessLogic HASH -168148930to public void org.adaptivecellsj.testbed.ejb.TestBean.simulateBusinessLogic(java.lang.String) throws java.lang.Exception
2013-06-20 14:47:47,036 DEBUG [org.jboss.ejb.StatelessSessionContainer] (main) Mapped simulateBusinessLogic HASH -168148930to public void org.adaptivecellsj.testbed.ejb.TestBean.simulateBusinessLogic(java.lang.String) throws java.lang.Exception
2013-06-20 14:47:25,792 DEBUG [org.jboss.classloader.spi.base.BaseClassLoader] (main) Created BaseClassLoader@98dfd5{vfsfile:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/} with policy VFSClassLoaderPolicy@8f1a48{name=vfsfile:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/ domain=null roots=[MemoryContextHandler@17198664[path= context=vfsmemory://3j011-2poqfo-hi607vk6-1-hi6082vb-c real=vfsmemory://3j011-2poqfo-hi607vk6-1-hi6082vb-c], FileHandler@20068734[path=jbossws.deployer context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/], DelegatingHandler@6072010[path=jbossws.deployer/FastInfoset.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/FastInfoset.jar], DelegatingHandler@13248082[path=jbossws.deployer/jboss-jaxb-intros.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/jboss-jaxb-intros.jar], DelegatingHandler@26858745[path=jbossws.deployer/jbossws-common.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/jbossws-common.jar], DelegatingHandler@7162132[path=jbossws.deployer/jbossws-framework.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/jbossws-framework.jar], DelegatingHandler@14216813[path=jbossws.deployer/jbossws-jboss50.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/jbossws-jboss50.jar], DelegatingHandler@873808[path=jbossws.deployer/jbossws-native-core.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/jbossws-native-core.jar], DelegatingHandler@22813470[path=jbossws.deployer/jettison.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/jettison.jar], DelegatingHandler@33053062[path=jbossws.deployer/policy.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/policy.jar], DelegatingHandler@29202037[path=jbossws.deployer/wsdl4j.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/wsdl4j.jar], DelegatingHandler@31514443[path=jbossws.deployer/xmlsec.jar context=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/ real=file:/home/comp40010/jboss-5.0.1.GA/server/default/deployers/jbossws.deployer/xmlsec.jar]]  delegates=null exported=[, org.jboss.ws.tools.schema, com.ibm.wsdl.xml, org.codehaus.jettison.json, org.jboss.ws.extensions.wsrm.protocol.spec200502, org.apache.xml.security.resource.schema, org.jboss.ws.extensions.wsrm.protocol, javax.wsdl.extensions.mime, schema, org.apache.xml.security.utils, com.ibm.wsdl.util, org.apache.xml.security.exceptions, org.jboss.ws.extensions.wsrm.protocol.spec200702, org.jboss.wsf.stack.jbws, org.jboss.ws.metadata.builder.jaxrpc, META-INF.maven.org.codehaus.jettison.jettison, org.jboss.ws.extensions.policy.deployer, org.jboss.ws.extensions.wsrm.transport, javax.wsdl, org.jboss.ws.jaxrpc, org.jboss.ws.tools.wsdl, org.jboss.wsf.test, org.jvnet.fastinfoset, org.jboss.ws.extensions.eventing.jaxws, org.jboss.ws.extensions.eventing.deployment, com.ibm.wsdl.extensions.schema, org.jboss.wsf.common.management, org.jboss.ws.extensions.validation, javax.wsdl.extensions, com.sun.xml.fastinfoset.dom, javax.wsdl.factory, org.jboss.ws.metadata.wsdl.xsd, com.sun.xml.fastinfoset.org.apache.xerces.util, org.jboss.ws.core.jaxws.spi, com.sun.xml.fastinfoset.tools, org.apache.xml.security.keys.storage, com.sun.xml.fastinfoset.stax.events, META-INF.services, org.jboss.wsf.container.jboss50.deployment.metadata, org.apache.xml.security.resource, org.jboss.ws.extensions.addressing.metadata, org.jboss.ws.core.jaxrpc.handler, org.jboss.ws.extensions.eventing.mgmt, META-INF.maven.org.jboss.ws.native.jbossws-native-core, com.sun.xml.fastinfoset.resources, org.jboss.ws.extensions.security.element, org.jboss.jaxb.intros.configmodel, org.jboss.ws.extensions.wsrm, META-INF.maven.org.jboss.ws.jbossws-framework, org.jboss.ws.core.soap, javax.wsdl.extensions.schema, org.apache.xml.security.keys, org.jboss.ws.extensions.policy.deployer.domainAssertion, org.jvnet.fastinfoset.stax, org.jboss.ws.tools.metadata, org.jboss.ws.core.jaxws.handler, dtd, org.jboss.ws.extensions.wsrm.server, org.jboss.ws.metadata.umdm, org.codehaus.jettison.mapped, com.sun.xml.fastinfoset.stax.util, org.jboss.wsf.framework.invocation, org.jboss.ws.extensions.wsrm.common, org.jboss.wsf.common.handler, org.jboss.ws.extensions.addressing.soap, com.sun.xml.fastinfoset.vocab, org.jboss.ws.metadata.accessor, org.jboss.ws.core, org.jboss.ws.core.jaxws.client, com.sun.xml.fastinfoset.alphabet, org.jboss.wsf.common.utils, org.jboss.ws.extensions.wsrm.transport.backchannel, org.jboss.ws.metadata.config.binding, com.ibm.wsdl, org.apache.xml.security.c14n.implementations, org.jboss.ws.extensions.wsrm.api, org.jboss.ws.tools.client, org.jboss.ws.tools.interfaces, org.jboss.wsf.framework.serviceref, org.jboss.ws.extensions.eventing.metadata, org.jboss.ws.extensions.eventing.common, org.apache.ws.policy, org.jboss.ws.core.binding, org.jboss.ws.metadata.builder, org.jboss.ws.extensions.wsrm.protocol.spi, org.jboss.ws.extensions.xop, com.ibm.wsdl.extensions.soap12, org.jboss.ws.extensions.wsrm.jaxws, org.apache.xml.security.keys.storage.implementations, org.jboss.ws.extensions.policy.deployer.exceptions, org.jboss.ws.core.transport.jms, com.sun.xml.fastinfoset.stax, javax.wsdl.extensions.soap, org.jboss.ws.extensions.security.jaxrpc, org.jvnet.fastinfoset.sax, META-INF, org.jboss.ws.metadata.jaxrpcmapping, org.jboss.ws.feature, org.jboss.ws.extensions.wsrm.common.serialization, org.jboss.ws.core.soap.attachment, org.apache.xml.security.transforms.params, org.jboss.ws.tools.jaxws.impl, javax.wsdl.extensions.soap12, org.jboss.ws.tools.helpers, org.jboss.ws.tools.factories, javax.wsdl.extensions.http, org.codehaus.jettison, javax.wsdl.xml, org.jboss.ws.tools.io, org.apache.xml.security.transforms, org.jboss.wsf.container.jboss50.deployer, org.jboss.wsf.container.jboss50.deployment, org.jboss.ws.extensions.policy.metadata, org.jboss.wsf.framework.management.recording, org.apache.xml.security.utils.resolver, org.apache.xml.security.encryption, org.jboss.ws.extensions.policy, org.jvnet.fastinfoset.sax.helpers, org.jboss.ws.core.client, com.sun.xml.fastinfoset.stax.factory, org.jboss.ws.extensions.addressing.jaxrpc, org.apache.xml.security.algorithms.implementations, org.jboss.wsf.framework.deployment, org.jboss.ws.extensions.wsrm.policy, org.jboss.ws.extensions.security.operation, com.ibm.wsdl.extensions.mime, org.jboss.ws.extensions.security.exception, org.jboss.ws.extensions.policy.deployer.util, org.apache.xml.security.keys.keyresolver.implementations, org.jboss.ws.core.jaxrpc, org.apache.xml.security.algorithms, org.jboss.ws.util.xml, org.jboss.ws.extensions.addressing.jaxws, org.jboss.jaxb.intros.handlers, org.jboss.wsf.container.jboss50.deployment.tomcat, org.jboss.ws.metadata.config.jaxrpc, org.codehaus.jettison.badgerfish, org.apache.xml.security.keys.content.keyvalues, org.apache.xml.security, org.apache.ws.policy.util, org.apache.xml.security.keys.content, org.jboss.ws.extensions.xop.jaxws, org.jboss.wsf.common.servlet, org.jboss.ws.core.server, com.sun.xml.fastinfoset.algorithm, META-INF.maven.org.jboss.ws.jbossws-common, org.apache.xml.security.utils.resolver.implementations, com.ibm.wsdl.util.xml, org.jboss.ws.metadata.wsdl, org.codehaus.jettison.util, org.jboss.ws.extensions.addressing, com.ibm.wsdl.factory, org.apache.xml.security.signature, org.jboss.ws.annotation, org.jboss.ws.extensions.xop.jaxrpc, org.jboss.ws.extensions.eventing, org.jboss.ws.extensions.json, org.jboss.ws.metadata.builder.jaxws, org.jboss.ws.metadata.config.jaxws, org.jboss.ws.tools.mapping, org.jboss.ws.extensions.security, org.jboss.ws.core.utils, org.apache.xml.security.keys.keyresolver, org.jboss.ws.extensions.wsrm.persistence, org.jboss.ws.tools.ant, org.jboss.ws.tools.config, org.jboss.ws.tools.exceptions, org.jboss.ws.metadata.wsse, org.jboss.ws.extensions.security.jaxws, org.apache.xml.security.transforms.implementations, org.jboss.jaxb.intros, org.jboss.ws.metadata.wsdl.xmlschema, org.jboss.ws.tools, org.jboss.wsf.container.jboss50.transport, org.jboss.ws.core.jaxrpc.binding.jbossxb, org.jboss.ws.core.jaxws.binding, com.ibm.wsdl.extensions, org.jboss.ws.metadata.config, org.jboss.ws.extensions.wsrm.config, org.jboss.ws.extensions.policy.annotation, com.sun.xml.fastinfoset.util, org.jboss.wsf.common.javax, com.sun.xml.fastinfoset, org.jboss.ws.extensions.security.nonce, org.apache.xml.security.c14n.helper, org.jboss.wsf.framework.http, org.jboss.wsf.framework.management, org.jboss.wsf.common.logging, org.jboss.ws.core.jaxrpc.binding, org.apache.xml.security.c14n, org.jboss.ws.core.jaxrpc.client, com.ibm.wsdl.extensions.soap, org.jboss.ws.core.jaxws, org.apache.xml.security.keys.content.x509, org.jboss.wsf.common, org.jboss.ws, com.ibm.wsdl.extensions.http, org.jboss.wsf.container.jboss50.invocation, org.jboss.ws.extensions.security.auth.callback, com.sun.xml.fastinfoset.sax, org.jboss.wsf.framework] <IMPORT-ALL>NON_EMPTY}
14:47:22,815 DEBUG [SARDeployer] <server>
 <!-- Load all jars from the JBOSS_HOME/server/<config>/lib directory and
        the shared JBOSS_HOME/common/lib directory. This can be restricted to
        specific jars by specifying them in the archives attribute.
   -->
 <classpath archives='*' codebase='${jboss.server.lib.url}'/>
 <classpath archives='*' codebase='${jboss.common.lib.url}'/>
 <!-- ==================================================================== -->
 <!-- Main Deployer                                                        -->
 <!-- ==================================================================== -->
 <mbean code='org.jboss.deployment.MainDeployer' name='jboss.system:service=MainDeployer'>
  <!-- This is used to delegate the deployment handling -->
  <attribute name='KernelMainDeployer'>
   <inject bean='MainDeployer'/>
  </attribute>
  <!-- This is used to validate incomplete deployments -->
  <attribute name='Controller'>
   <inject bean='jboss.kernel:service=Kernel' property='controller'/>
  </attribute>
 </mbean>
 <!-- ==================================================================== -->
 <!-- XMBean Persistence                                                   -->
 <!-- ==================================================================== -->
 <mbean code='org.jboss.system.pm.AttributePersistenceService' name='jboss:service=AttributePersistenceService' xmbean-dd='resource:xmdesc/AttributePersistenceService-xmbean.xml'>  <!-- the AttributePersistenceService is persistent, itself -->
  <!--
      <attribute name="AttributePersistenceManagerClass">org.jboss.system.pm.XMLAttributePersistenceManager</attribute>
      <attribute name="AttributePersistenceManagerConfig">
         <data-directory>data/xmbean-attrs</data-directory>
      </attribute>
      <attribute name="ApmDestroyOnServiceStop">false</attribute>
      <attribute name="VersionTag"></attribute>
      -->
</mbean>
 <!-- A Thread pool service -->
 <mbean code='org.jboss.util.threadpool.BasicThreadPool' name='jboss.system:service=ThreadPool'>
  <attribute name='Name'>JBoss System Threads</attribute>
  <attribute name='ThreadGroupName'>System Threads</attribute>
  <!-- How long a thread will live without any tasks in MS -->
  <attribute name='KeepAliveTime'>60000</attribute>
  <!-- The max number of threads in the pool -->
  <attribute name='MaximumPoolSize'>10</attribute>
  <!-- The max number of tasks before the queue is full -->
  <attribute name='MaximumQueueSize'>1000</attribute>
  <!-- The behavior of the pool when a task is added and the queue is full.
      abort - a RuntimeException is thrown
      run - the calling thread executes the task
      wait - the calling thread blocks until the queue has room
      discard - the task is silently discarded without being run
      discardOldest - check to see if a task is about to complete and enque
         the new task if possible, else run the task in the calling thread
      -->
  <attribute name='BlockingMode'>run</attribute>
 </mbean>
 <!-- ==================================================================== -->
 <!-- Log4j Initialization                                                 -->
 <!-- ==================================================================== -->
 <mbean code='org.jboss.logging.Log4jService' name='jboss.system:type=Log4jService,service=Logging' xmbean-dd='resource:xmdesc/Log4jService-xmbean.xml'>
  <attribute name='ConfigurationURL'>resource:jboss-log4j.xml</attribute>
  <!-- Set the org.apache.log4j.helpers.LogLog.setQuiteMode. As of log4j1.2.8
      this needs to be set to avoid a possible deadlock on exception at the
      appender level. See bug#696819.
      -->
  <attribute name='Log4jQuietMode'>true</attribute>
  <!-- How frequently in seconds the ConfigurationURL is checked for changes -->
  <attribute name='RefreshPeriod'>60</attribute>
  <!-- The value to assign to system property jboss.server.log.threshold
           if it is not already set. This system property in turn controls
           the logging threshold for the server.log file.
           If the system property is already set when this service is created,
           this value is ignored. -->
  <attribute name='DefaultJBossServerLogThreshold'>DEBUG</attribute>
 </mbean>
 <!-- ==================================================================== -->
 <!-- Active Alarm Table                                                   -->
 <!-- ==================================================================== -->
 <!--
      | The ActiveAlarmTable service is a simple JMX notification listener
      | that maintains a table with the received notifications (alarms).
      | The alarms can be acknowledged through the jmx or the web console.
      | Modify the SubscriptionList below to subscribe for any notification
      | in the system and treat it as an alarm.
      | The JMXNotificationAppender is a log4j Appender that can be configured
      | in log4j.xml, that trasforms logging events to JMX notification so they
      | can be fed back into the table. By storing the WARN or higher level logging
      | events you can have a quick view of important system faults.
      |
      | The following attributes may be set:
      |
      | MaxTableSize (default 1000)
      |  - set an upper limit to the number of stored alarms
      | LogLevel (default DEBUG)
      |  - the log level to use for received notification, can be set to NONE
      | ServerId (default jboss)
      |  - used to construct unique alarm ids
      | SubscriptionList
      |  - subscribe for the notifications to be stored in the table
   <mbean code="org.jboss.monitor.services.ActiveAlarmTable"
          name="jboss.monitor:service=ActiveAlarmTable">
      <attribute name="SubscriptionList">
         <subscription-list>
            <mbean name="jboss.monitor:*">
               <notification type="jboss.alarm"/>
               <notification type="JBOSS_MONITOR_NOTIFICATION"/>
            </mbean>
            <mbean name="jboss.system:service=Logging,type=JMXNotificationAppender"/>
         </subscription-list>
      </attribute>
   </mbean>
   -->
 <!-- ==================================================================== -->
 <!-- JBoss RMI Classloader - only install when available                  -->
 <!-- ==================================================================== -->
 <mbean code='org.jboss.util.property.jmx.SystemPropertyClassValue' name='jboss.rmi:type=RMIClassLoader'>
  <attribute name='Property'>java.rmi.server.RMIClassLoaderSpi</attribute>
  <attribute name='ClassName'>org.jboss.system.JBossRMIClassLoader</attribute>
 </mbean>
 <!-- ==================================================================== -->
 <!-- Class Loading                                                        -->
 <!-- ==================================================================== -->
 <!-- A mini webserver used for dynamic and class and resource loading -->
 <mbean code='org.jboss.web.WebService' name='jboss:service=WebService'>
  <!-- The Bind address and Port -->
  <attribute name='BindAddress'>${jboss.bind.address}</attribute>
  <attribute name='Port'>
   <!-- Get the port to use from ServiceBindingManager. -->
   <value-factory bean='ServiceBindingManager' method='getIntBinding' parameter='jboss:service=WebService'/>
  </attribute>
  <!--  The address to use for the host portion of the RMI codebase URL -->
  <attribute name='Host'>${java.rmi.server.hostname}</attribute>
  <!-- Should non-EJB .class files be downloadable -->
  <attribute name='DownloadServerClasses'>true</attribute>
  <!-- Should resources other than .class files be downloadable. Both
         DownloadServerClasses and DownloadResources must be true for resources
         to be downloadable. This is false by default because its generally a
         bad idea as server configuration files that container security
         information can be accessed.
       -->
  <attribute name='DownloadResources'>false</attribute>
  <!-- Use the default thread pool for dynamic class loading -->
  <depends optional-attribute-name='ThreadPool' proxy-type='attribute'>jboss.system:service=ThreadPool</depends>
 </mbean>
 <!-- ==================================================================== -->
 <!-- JNDI                                                                 -->
 <!-- ==================================================================== -->
 <!-- A simple mbean wrapper around the jndi Naming object. This
      only handles an in memory instance. The NamingService uses this
      as the JNDI store and exposes it remotely.
   -->
 <mbean code='org.jnp.server.NamingBeanImpl' name='jboss:service=NamingBeanImpl' xmbean-dd='resource:xmdesc/NamingBean-xmbean.xml'></mbean>
 <mbean code='org.jboss.naming.NamingService' name='jboss:service=Naming' xmbean-dd='resource:xmdesc/NamingService-xmbean.xml'>
  <!-- The call by value mode. true if all lookups are unmarshalled using
         the caller's TCL, false if in VM lookups return the value by reference.
      -->
  <attribute name='CallByValue'>false</attribute>
  <!-- The listening port for the bootstrap JNP service. Set this to -1
         to run the NamingService without the JNP invoker listening port.
      -->
  <attribute name='Port'>
   <value-factory bean='ServiceBindingManager' method='getIntBinding'>
    <parameter>jboss:service=Naming</parameter>
    <parameter>Port</parameter>
   </value-factory>
  </attribute>
  <!-- The bootstrap JNP server bind address. This also sets the default
         RMI service bind address. Empty == all addresses
      -->
  <attribute name='BindAddress'>${jboss.bind.address}</attribute>
  <!-- The port of the RMI naming service, 0 == anonymous -->
  <attribute name='RmiPort'>
   <value-factory bean='ServiceBindingManager' method='getIntBinding'>
    <parameter>jboss:service=Naming</parameter>
    <parameter>RmiPort</parameter>
   </value-factory>
  </attribute>
  <!-- The RMI service bind address. Empty == all addresses
      -->
  <attribute name='RmiBindAddress'>${jboss.bind.address}</attribute>
  <!-- The thread pool service used to control the bootstrap lookups -->
  <depends optional-attribute-name='LookupPool' proxy-type='attribute'>jboss.system:service=ThreadPool</depends>
  <!-- An example of using the unifed invoker as the transport.
         <depends optional-attribute-name="InvokerProxyFactory"
         proxy-type="attribute">jboss:service=proxyFactory,type=unified,target=Naming</depends>
      -->
  <depends optional-attribute-name='Naming' proxy-type='attribute'>jboss:service=NamingBeanImpl</depends>
 </mbean>
 <mbean code='org.jboss.naming.JNDIView' name='jboss:service=JNDIView' xmbean-dd='resource:xmdesc/JNDIView-xmbean.xml'>
  <!-- The HANamingService service name -->
  <attribute name='HANamingService'>jboss:service=HAJNDI</attribute>
 </mbean>
 <!-- ==================================================================== -->
 <!-- Security                                                             -->
 <!-- ==================================================================== -->
 <!-- JAAS security manager and realm mapping -->
 <mbean code='org.jboss.security.plugins.JaasSecurityManagerService' name='jboss.security:service=JaasSecurityManager'>
  <!-- A flag which indicates whether the SecurityAssociation server mode
      is set on service creation. This is true by default since the
      SecurityAssociation should be thread local for multi-threaded server
      operation.
      -->
  <attribute name='ServerMode'>true</attribute>
  <attribute name='SecurityManagerClassName'>org.jboss.security.plugins.JaasSecurityManager</attribute>
  <attribute name='DefaultUnauthenticatedPrincipal'>anonymous</attribute>
  <!-- DefaultCacheTimeout: Specifies the default timed cache policy timeout
      in seconds.
      If you want to disable caching of security credentials, set this to 0 to
      force authentication to occur every time. This has no affect if the
      AuthenticationCacheJndiName has been changed from the default value.
      -->
  <attribute name='DefaultCacheTimeout'>1800</attribute>
  <!-- DefaultCacheResolution: Specifies the default timed cache policy
      resolution in seconds. This controls the interval at which the cache
      current timestamp is updated and should be less than the DefaultCacheTimeout
      in order for the timeout to be meaningful. This has no affect if the
      AuthenticationCacheJndiName has been changed from the default value.
      -->
  <attribute name='DefaultCacheResolution'>60</attribute>
  <!-- DeepCopySubjectMode: This set the copy mode of subjects done by the
      security managers to be deep copies that makes copies of the subject
      principals and credentials if they are cloneable. It should be set to
      true if subject include mutable content that can be corrupted when
      multiple threads have the same identity and cache flushes/logout clearing
      the subject in one thread results in subject references affecting other
      threads.
      -->
  <attribute name='DeepCopySubjectMode'>false</attribute>
 </mbean>
 <!-- ==================================================================== -->
 <!-- Monitoring and Management                                            -->
 <!-- ==================================================================== -->
 <!-- Uncomment to enable JMX monitoring of the bean cache
   <mbean code="org.jboss.monitor.BeanCacheMonitor"
          name="jboss.monitor:name=BeanCacheMonitor"/>
   -->
 <!-- Uncomment to enable JMX monitoring of the entity bean locking
   <mbean code="org.jboss.monitor.EntityLockMonitor"
          name="jboss.monitor:name=EntityLockMonitor"/>
   -->
 <!-- ==================================================================== -->
 <!-- An MBean that is a registry for JDBC type-mapping metadata           -->
 <!-- ==================================================================== -->
 <mbean code='org.jboss.ejb.plugins.cmp.jdbc.metadata.MetaDataLibrary' name='jboss.jdbc:service=metadata'/>
</server>
