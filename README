STATUS

What's already done:
- Test suite 1: Steady state - monitoring jboss behavior with (and without) adaptive cells deployed. This is to get to know types of exceptions that are occuring before running config1..10.  
- Test suite 2: Proper functional testing. Executed config1..10 and gathered heap dumps and gc logs after each execution. 

What's currently ongoing:
- Test suite 2: Analysing logs with Splunk (log mining tool) to identify exceptions while running config1..10. I will finish this

Next steps to be done:
- Test suite 2: 
a) Head dump analysis to spot potential memory leaks. (currently all heap dumps are on my HDD - they're quite big - 800-900MB per test case. will have to figure out how to share them)
At the moment, I've gathered heap dumps but Memory profiler in visualVM can be very helpful - if we won't spot any memory leaks with heapdumps it may be worth to reexecute tests and use memory profiler (specifically, I'm talking about metric: surviving generations https://blogs.oracle.com/nbprofiler/entry/what_do_the_surviving_generations)
Tutorials for finding memory leaks: 
http://rejeev.blogspot.ie/2009/04/analyzing-memory-leak-in-java.html
http://www.captaincasa.com/pdf/techdoc_memprofiling.pdf
https://netbeans.org/kb/articles/nb-profiler-uncoveringleaks_pt1.html (this is for Netbeans profiler, but visualVM is using the same engine for profiling)
b) GC basic analysis.
c) Prepare to load testing. Gather information how to configure jmeter to test adaptivecells. Write load tests.
Tutorials for load testing approach:
http://community.blazemeter.com/knowledgebase/articles/34731-adaptive-load-scenario-how-to-identify-performan

DOCS

Google doc for Section 1: Functional testing:
Part 1:
https://docs.google.com/document/d/1xIsz4foT0GKegalfEzh8RtT48E8tzXpZjRCk486K3hs/edit?usp=sharing
Part 2:
https://docs.google.com/document/d/1iPUA_O-qLiuYE-jUGC4lpHxCCdRZa7vFVUxN0WMwkw4/edit#

TOOLS

Tools that I'm using (Kamil):
- Log mining: Splunk
- JVM Profiling: VisualVM (tutorials: https://blogs.oracle.com/nbprofiler/entry/profiling_with_visualvm_part_1 https://blogs.oracle.com/nbprofiler/entry/profiling_with_visualvm_part_2 ) with plugins: VisualGC
- Linux monitoring: Cacti (graphs: CPU, Memory, Processes, Load average, Network in/out)

POINTS 
executive summary 10%
functional testing 10%
analysis and optimisation 30%
performance and load testing 25%
modeling 25%


